 
app.js 
''' 
define([
  './TopicSelector',
  './VerbenUndNomenMitPraepositionenQuestionProvider',
  './UserProgressManager',
  './DataPersistence',
  './renderService'
], function(TopicSelector, VerbenUndNomenMitPraepositionenQuestionProvider, UserProgressManager, DataPersistence, renderService) {

  const userProgressManager = new UserProgressManager();
  const dataPersistence = new DataPersistence();
  const topicSelector = new TopicSelector(['Verben und Nomen mit Praepositionen']);

  let questionsProvider;
  let currentQuestion;
  let isAnswered = false;

  function initializeState() {
    const savedProgress = dataPersistence.loadData();
    if (savedProgress) {
      userProgressManager.answerHistory = savedProgress.answerHistory;
      userProgressManager.questionProbabilities = savedProgress.questionProbabilities;
      userProgressManager.incorrectAnswers = savedProgress.incorrectAnswers;
    }
  }

  function saveState() {
    const progressData = {
      answerHistory: userProgressManager.getAnswerHistory(),
      questionProbabilities: userProgressManager.getQuestionProbabilities(),
      incorrectAnswers: userProgressManager.getIncorrectAnswers(),
    };
    dataPersistence.saveData(progressData);
  }

  function handleAnswerSelection(event, answer) {
    event.preventDefault();

    if (isAnswered) {
      return;
    } else {
      isAnswered = true;
    }

    const isCorrect = questionsProvider.checkAnswer(currentQuestion, answer);
    userProgressManager.recordAnswer(currentQuestion, isCorrect);

    renderService.renderFeedback(isCorrect, answer);
    document.getElementById("next").classList.remove("d-none");
  }

  function handleNextQuestion() {
    saveState();
    currentQuestion = questionsProvider.getNextQuestion();
    renderService.renderQuestion(currentQuestion);
    document.getElementById("next").classList.add("d-none");
    isAnswered = false;
  }

  function startApp() {
    initializeState();

    topicSelector.renderTopicSelector();

    const selectedTopic = topicSelector.getSelectedTopic();
    if (selectedTopic === 'Verben und Nomen mit Praepositionen') {
      questionsProvider = new VerbenUndNomenMitPraepositionenQuestionProvider(userProgressManager);
    }

    currentQuestion = questionsProvider.getNextQuestion();
    renderService.renderQuestion(currentQuestion);
  }

  document.getElementById("next").addEventListener("click", handleNextQuestion);

  startApp();

});''' 
 
combine all code in one file.bat 
''' 
@echo off
setlocal enabledelayedexpansion

set "outputFile=result.txt"

echo. > %outputFile%

for %%F in (*) do (
    if not "%%F"=="%outputFile%" (
        echo %%F >> %outputFile%
        echo ''' >> %outputFile%
        type "%%F" >> %outputFile%
        echo ''' >> %outputFile%
        echo. >> %outputFile%
    )
)

echo Combined all files into %outputFile%''' 
 
DataPersistence.js 
''' 
define(function () {
    class DataPersistence {
        saveData(data) {
            localStorage.setItem('appData', JSON.stringify(data));
        }

        loadData() {
            const data = localStorage.getItem('appData');
            return data ? JSON.parse(data) : null;
        }
    }

    return DataPersistence;
});''' 
 
index.html 
''' 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>German Prepositions Practice</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    .badge {
      margin-right: 5px;
    }
    .blank {
      font-weight: bold;
    }
    .fixed-bottom {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background-color: white;
      padding: 10px;
      box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>
<body>
  <div class="container-fluid my-5">
    <div class="row justify-content-center">
      <div class="col-md-8 col-lg-6">
        <h1 class="text-center mb-4">German Prepositions Practice</h1>
        <div id="question" class="mb-4 text-center"></div>
        <div id="options" class="btn-group-toggle mb-4" data-toggle="buttons"></div>
        <div id="feedback" class="mb-4"></div>
        <button id="next" class="btn btn-primary d-none">Next</button>
      </div>
    </div>
  </div>

  <script src="https://requirejs.org/docs/release/2.3.6/minified/require.js"></script>
  <script>
    requirejs.config({
      baseUrl: './',
      paths: {
        app: 'app',
        TopicSelector: 'TopicSelector',
        VerbenUndNomenMitPraepositionenQuestionProvider: 'VerbenUndNomenMitPraepositionenQuestionProvider',
        UserProgressManager: 'UserProgressManager',
        DataPersistence: 'DataPersistence',
        renderService: 'renderService',
        QuestionsProvider: 'QuestionsProvider',
        VerbenUndNomenMitPraepositionenQuestion: 'VerbenUndNomenMitPraepositionenQuestion',
        QuestionType: 'QuestionType',
        VerbenUndNomenMitPraepositionenQuestions: 'VerbenUndNomenMitPraepositionenQuestions'
      }
    });

    requirejs(['app']);
  </script>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>''' 
 
QuestionGenerator.js 
''' 
define(function () {
    class QuestionGenerator {
        generateQuestion(questionType, difficulty) {
            // Implementation for generating questions based on type and difficulty
            // You can use predefined rules, algorithms, or external libraries here
            // Return the generated question
        }
    }

    return QuestionGenerator;
});''' 
 
QuestionsProvider.js 
''' 
define(function () {
    class QuestionsProvider {
        constructor() {
            this.questionList = [];
            this.currentQuestionIndex = 0;
        }

        getNextQuestion() {
            if (this.currentQuestionIndex >= this.questionList.length) {
                this.currentQuestionIndex = 0;
            }
            return this.questionList[this.currentQuestionIndex++];
        }

        checkAnswer(question, userAnswer) {
            return question.checkAnswer(userAnswer);
        }

        resetProgress() {
            this.currentQuestionIndex = 0;
        }

        addQuestion(question) {
            this.questionList.push(question);
        }
    }

    return QuestionsProvider;
});''' 
 
QuestionType.js 
''' 
define(function() {
class QuestionType {
    constructor(sentence, options, answer) {
      this.sentence = sentence;
      this.options = options;
      this.answer = answer;
    }
  
    checkAnswer(userAnswer) {
      return userAnswer === this.answer;
    }
  }
  
  return QuestionType;
});''' 
 
renderService.js 
''' 
define(function () {
    const renderService = {
        renderQuestion: function (question) {
            const questionElement = document.getElementById("question");
            questionElement.innerHTML = question.sentence.replace("_____", "<span class='blank'>_____</span>");

            const optionsDiv = document.getElementById("options");
            optionsDiv.innerHTML = "";

            const rowCount = 2;
            const colCount = 2;

            for (let i = 0; i < rowCount; i++) {
                const row = document.createElement("div");
                row.className = "row mb-2";

                for (let j = 0; j < colCount; j++) {
                    const index = i * colCount + j;
                    if (index >= question.options.length) break;

                    const option = question.options[index];
                    const button = document.createElement("button");
                    button.type = "button";
                    button.className = "btn btn-outline-primary btn-block btn-lg";
                    button.textContent = option;
                    button.addEventListener("click", (event) => handleAnswerSelection(event, option));

                    const col = document.createElement("div");
                    col.className = "col-6";
                    col.appendChild(button);
                    row.appendChild(col);
                }

                optionsDiv.appendChild(row);
            }
        },

        renderFeedback: function (isCorrect, answer) {
            const optionsDiv = document.getElementById("options");
            const buttons = optionsDiv.querySelectorAll("button");

            buttons.forEach((button) => {
                button.classList.remove("btn-success", "btn-danger");
                if (button.textContent === currentQuestion.answer) {
                    button.classList.add("btn-success");
                } else if (button.textContent === answer && !isCorrect) {
                    button.classList.add("btn-danger");
                }
            });

            const feedbackDiv = document.getElementById("feedback");
            feedbackDiv.innerHTML = "";

            const badgeContainer = document.createElement("div");
            badgeContainer.classList.add("d-flex", "flex-wrap", "justify-content-center", "fixed-bottom", "mb-2");

            for (let i = 0; i < answerHistory.length; i += config.badgesPerRow) {
                const row = document.createElement("div");
                row.classList.add("d-flex", "mb-2");

                for (let j = 0; j < config.badgesPerRow && i + j < answerHistory.length; j++) {
                    const badge = document.createElement("span");
                    badge.className = `badge ${answerHistory[i + j] ? "badge-success" : "badge-danger"} mr-2`;
                    badge.textContent = "●";
                    row.appendChild(badge);
                }

                badgeContainer.appendChild(row);
            }

            const questionElement = document.getElementById("question");
            const blankElement = questionElement.querySelector(".blank");
            if (blankElement) {
                blankElement.textContent = currentQuestion.answer;
                blankElement.classList.add("text-success", "font-weight-bold");
            }

            feedbackDiv.appendChild(badgeContainer);

            const correctAnswers = answerHistory.filter((result) => result).length;
            const totalAnswers = Math.min(answerHistory.length, config.maxAnswersTracked);
            const scoreDiv = document.createElement("div");
            scoreDiv.classList.add("text-center", "mb-2");
            scoreDiv.textContent = `Correct ${correctAnswers}/${totalAnswers}`;
            feedbackDiv.appendChild(scoreDiv);
        }
    };

    return renderService;
});''' 
 
TopicSelector.js 
''' 
define(function () {
    class TopicSelector {
        constructor(topics) {
            this.topics = topics;
            this.selectedTopic = null;
        }

        renderTopicSelector() {
            const topicSelectorContainer = document.createElement('div');
            topicSelectorContainer.className = 'topic-selector-container';

            const topicSelectorLabel = document.createElement('label');
            topicSelectorLabel.textContent = 'Select a topic:';
            topicSelectorContainer.appendChild(topicSelectorLabel);

            const topicSelectorSelect = document.createElement('select');
            topicSelectorSelect.className = 'topic-selector-select';
            topicSelectorSelect.addEventListener('change', this.handleTopicChange.bind(this));

            this.topics.forEach(topic => {
                const option = document.createElement('option');
                option.value = topic;
                option.textContent = topic;
                topicSelectorSelect.appendChild(option);
            });

            topicSelectorContainer.appendChild(topicSelectorSelect);

            document.body.insertBefore(topicSelectorContainer, document.body.firstChild);
        }

        handleTopicChange(event) {
            this.selectedTopic = event.target.value;
        }

        getSelectedTopic() {
            return this.selectedTopic;
        }
    }

    return TopicSelector;
});''' 
 
UserProgressManager.js 
''' 
define(function () {
    class UserProgressManager {
        constructor() {
            this.answerHistory = [];
            this.questionProbabilities = {};
            this.incorrectAnswers = [];
        }

        recordAnswer(question, isCorrect) {
            this.answerHistory.push(isCorrect);
            this.updateQuestionProbability(question, isCorrect);

            if (!isCorrect) {
                this.incorrectAnswers.push({
                    question: question.sentence,
                    answer: question.answer,
                    time: new Date().toLocaleString()
                });
            }
        }

        updateQuestionProbability(question, isCorrect) {
            const currentProbability = this.questionProbabilities[question.sentence] || 1;

            if (isCorrect) {
                this.questionProbabilities[question.sentence] = Math.max(currentProbability * 0.9, 0.1);
            } else {
                this.questionProbabilities[question.sentence] = Math.min(currentProbability * 1.5, 5);
            }
        }

        getAnswerHistory() {
            return this.answerHistory;
        }

        getQuestionProbabilities() {
            return this.questionProbabilities;
        }

        getIncorrectAnswers() {
            return this.incorrectAnswers;
        }
    }

    return UserProgressManager;
});''' 
 
VerbenUndNomenMitPraepositionenQuestion.js 
''' 
define(['./QuestionType'], function (QuestionType) {
    class VerbenUndNomenMitPraepositionenQuestion extends QuestionType {
        constructor(sentence, options, answer) {
            super(sentence, options, answer);
        }
    }
    return VerbenUndNomenMitPraepositionenQuestion;
});''' 
 
VerbenUndNomenMitPraepositionenQuestionProvider.js 
''' 
define([
    './QuestionsProvider',
    './VerbenUndNomenMitPraepositionenQuestion',
    './VerbenUndNomenMitPraepositionenQuestions'
  ], function(QuestionsProvider, VerbenUndNomenMitPraepositionenQuestion, questions) {
  
    class VerbenUndNomenMitPraepositionenQuestionProvider extends QuestionsProvider {
      constructor(userProgressManager) {
        super();
        this.userProgressManager = userProgressManager;
        this.loadQuestions();
      }
  
      loadQuestions() {
        questions.forEach(question => {
          const { sentence, options, answer } = question;
          const newQuestion = new VerbenUndNomenMitPraepositionenQuestion(sentence, options, answer);
          this.addQuestion(newQuestion);
        });
      }
  
      getNextQuestion() {
        const questionProbabilities = this.userProgressManager.getQuestionProbabilities();
        const totalProbability = Object.values(questionProbabilities).reduce((total, prob) => total + prob, 0);
        let randomValue = Math.random() * totalProbability;
  
        for (const question of this.questionList) {
          const probability = questionProbabilities[question.sentence] || 1;
          randomValue -= probability;
          if (randomValue <= 0) {
            return question;
          }
        }
  
        return this.questionList[0];
      }
    }
  
    return VerbenUndNomenMitPraepositionenQuestionProvider;
  });''' 
 
VerbenUndNomenMitPraepositionenQuestions.js 
''' 
define(function () {
  const questions = [
    {
      sentence: "Ich gehe _____ die Schule.",
      options: ["in", "auf", "zu", "an"],
      answer: "in"
    },
    {
      sentence: "Ich gehe _____ Schule.",
      options: ["in", "auf", "zur", "an"],
      answer: "zur"
    },
    {
      sentence: "Mein Bruder arbeitet _____ einem Büro.",
      options: ["in", "auf", "zu", "an"],
      answer: "in"
    },
    {
      sentence: "Wir fahren _____ dem Urlaub.",
      options: ["in", "auf", "zu", "im"],
      answer: "in"
    },
    {
      sentence: "Ich warte _____ den Bus.",
      options: ["für", "auf", "zu", "an"],
      answer: "auf"
    },
    {
      sentence: "Meine Schwester studiert _____ der Universität.",
      options: ["in", "auf", "an", "zu"],
      answer: "an"
    },
    {
      sentence: "Wir denken _____ unsere Freunde.",
      options: ["für", "an", "auf", "zu"],
      answer: "an"
    },
    {
      sentence: "Ich freue mich _____ deine Geburtstagsparty.",
      options: ["für", "auf", "zu", "an"],
      answer: "auf"
    },
    {
      sentence: "Wir sitzen _____ dem Tisch.",
      options: ["auf", "an", "in", "zu"],
      answer: "an"
    },
    {
      sentence: "Die Katze springt _____ den Sessel.",
      options: ["auf", "in", "an", "zu"],
      answer: "auf"
    },
    {
      sentence: "Ich lerne _____ der Prüfung.",
      options: ["für", "zu", "an", "auf"],
      answer: "für"
    },
    {
      sentence: "Meine Mutter kocht _____ dem Abendessen.",
      options: ["für", "zu", "an", "auf"],
      answer: "für"
    },
    {
      sentence: "Wir gehen _____ den Park spazieren.",
      options: ["in", "auf", "an", "zu"],
      answer: "in"
    },
    {
      sentence: "Ich warte _____ meinen Freund.",
      options: ["für", "auf", "an", "zu"],
      answer: "auf"
    },
    {
      sentence: "Mein Vater arbeitet _____ einer Firma.",
      options: ["in", "für", "an", "auf"],
      answer: "für"
    },
    {
      sentence: "Wir fahren _____ Ski.",
      options: ["in", "auf", "an", "zu"],
      answer: "auf"
    },
    {
      sentence: "Ich schreibe _____ meinem Tagebuch.",
      options: ["in", "auf", "an", "zu"],
      answer: "in"
    },
    {
      sentence: "Wir sitzen _____ dem Sofa.",
      options: ["auf", "in", "an", "zu"],
      answer: "auf"
    },
    {
      sentence: "Meine Freundin wartet _____ mich.",
      options: ["für", "auf", "an", "zu"],
      answer: "auf"
    },
    {
      sentence: "Wir gehen _____ Konzert.",
      options: ["in", "auf", "zu", "zum"],
      answer: "zum"
    },
    {
      sentence: "Ich arbeite _____ einem Projekt.",
      options: ["in", "auf", "an", "zu"],
      answer: "an"
    },
    {
      sentence: "Mein Bruder spielt _____ dem Fußballverein.",
      options: ["in", "für", "an", "auf"],
      answer: "für"
    }
  ];

  return questions;
});''' 
 
